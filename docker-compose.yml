version: '3.8'

services:
  # PostgreSQL Database with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: trading_postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-trading_db}
      POSTGRES_USER: ${DATABASE_USER:-trading_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-secure_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-trading_user} -d ${DATABASE_NAME:-trading_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - trading_network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: trading_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - trading_network

  # Main Trading Application
  trading_app:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: trading_app
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${DATABASE_USER:-trading_user}:${DATABASE_PASSWORD:-secure_password}@postgres:5432/${DATABASE_NAME:-trading_db}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-trading_db}
      DATABASE_USER: ${DATABASE_USER:-trading_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-secure_password}
      
      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      
      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      
      # Application settings
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      API_HOST: 0.0.0.0
      API_PORT: 8000
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - trading_network

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: trading_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - trading_app
    restart: unless-stopped
    networks:
      - trading_network
    profiles:
      - production

  # Data scheduler (for periodic data updates)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.scheduler
    container_name: trading_scheduler
    environment:
      DATABASE_URL: postgresql://${DATABASE_USER:-trading_user}:${DATABASE_PASSWORD:-secure_password}@postgres:5432/${DATABASE_NAME:-trading_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      UPDATE_INTERVAL_MINUTES: ${UPDATE_INTERVAL_MINUTES:-15}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - trading_network
    profiles:
      - production

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: trading_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - trading_network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: trading_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - trading_network
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network
networks:
  trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16