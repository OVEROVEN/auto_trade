"""
Database models for the AI Trading System
"""

from sqlalchemy import Column, Integer, String, Float, DateTime, Boolean, Text, ForeignKey, Index
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import JSONB
from datetime import datetime

Base = declarative_base()

class StockPrice(Base):
    """Stock price data with OHLCV information"""
    __tablename__ = 'stock_prices'
    
    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    timestamp = Column(DateTime, nullable=False, index=True)
    open = Column(Float, nullable=False)
    high = Column(Float, nullable=False)
    low = Column(Float, nullable=False)
    close = Column(Float, nullable=False)
    volume = Column(Integer, nullable=False)
    adj_close = Column(Float)
    market = Column(String(10), default='US')  # US, TW, etc.
    
    # Create composite index for efficient queries
    __table_args__ = (
        Index('ix_stock_prices_symbol_timestamp', 'symbol', 'timestamp'),
        Index('ix_stock_prices_timestamp_symbol', 'timestamp', 'symbol'),
    )
    
    def __repr__(self):
        return f"<StockPrice(symbol={self.symbol}, timestamp={self.timestamp}, close={self.close})>"

class TechnicalIndicator(Base):
    """Technical indicators calculated for stocks"""
    __tablename__ = 'technical_indicators'
    
    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    timestamp = Column(DateTime, nullable=False, index=True)
    
    # Common indicators
    rsi = Column(Float)
    macd = Column(Float)
    macd_signal = Column(Float)
    macd_histogram = Column(Float)
    bb_upper = Column(Float)
    bb_middle = Column(Float)
    bb_lower = Column(Float)
    sma_20 = Column(Float)
    sma_50 = Column(Float)
    ema_12 = Column(Float)
    ema_26 = Column(Float)
    atr = Column(Float)
    adx = Column(Float)
    stoch_k = Column(Float)
    stoch_d = Column(Float)
    williams_r = Column(Float)
    
    # Volume indicators
    obv = Column(Float)
    volume_sma = Column(Float)
    volume_ratio = Column(Float)
    
    __table_args__ = (
        Index('ix_technical_indicators_symbol_timestamp', 'symbol', 'timestamp'),
    )

class TechnicalPattern(Base):
    """Detected technical patterns"""
    __tablename__ = 'technical_patterns'
    
    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    pattern_type = Column(String(50), nullable=False)  # head_and_shoulders, double_top, etc.
    start_date = Column(DateTime, nullable=False)
    end_date = Column(DateTime, nullable=False)
    confidence = Column(Float, nullable=False)
    description = Column(Text)
    
    # Pattern-specific data
    key_points = Column(JSONB)  # Store coordinates as JSON
    target_price = Column(Float)
    stop_loss = Column(Float)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    
    __table_args__ = (
        Index('ix_technical_patterns_symbol_type', 'symbol', 'pattern_type'),
        Index('ix_technical_patterns_start_date', 'start_date'),
    )

class TradingSignal(Base):
    """Trading signals generated by the system"""
    __tablename__ = 'trading_signals'
    
    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    signal_type = Column(String(10), nullable=False)  # BUY, SELL, HOLD
    signal_source = Column(String(50), nullable=False)  # RSI, MACD, AI, etc.
    strength = Column(Float, nullable=False)  # 0.0 to 1.0
    price = Column(Float, nullable=False)
    timestamp = Column(DateTime, nullable=False, default=datetime.utcnow)
    
    # Additional signal data
    reasoning = Column(Text)
    target_price = Column(Float)
    stop_loss = Column(Float)
    risk_score = Column(Float)
    
    # AI analysis data
    ai_confidence = Column(Float)
    ai_reasoning = Column(Text)
    
    __table_args__ = (
        Index('ix_trading_signals_symbol_timestamp', 'symbol', 'timestamp'),
        Index('ix_trading_signals_type_strength', 'signal_type', 'strength'),
    )

class AIAnalysis(Base):
    """AI analysis results from OpenAI"""
    __tablename__ = 'ai_analysis'
    
    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    analysis_type = Column(String(50), nullable=False)  # technical, sentiment, strategy
    timestamp = Column(DateTime, nullable=False, default=datetime.utcnow)
    
    # AI results
    recommendation = Column(String(10), nullable=False)  # BUY, SELL, HOLD
    confidence = Column(Float, nullable=False)
    reasoning = Column(Text, nullable=False)
    key_factors = Column(JSONB)  # Store as JSON array
    
    # Targets and risk
    price_target = Column(Float)
    stop_loss = Column(Float)
    risk_score = Column(Float)
    
    # Model info
    model_used = Column(String(50), default='gpt-3.5-turbo')
    processing_time = Column(Float)  # Processing time in seconds
    
    __table_args__ = (
        Index('ix_ai_analysis_symbol_timestamp', 'symbol', 'timestamp'),
        Index('ix_ai_analysis_type_confidence', 'analysis_type', 'confidence'),
    )

class BacktestResult(Base):
    """Backtesting results for strategies"""
    __tablename__ = 'backtest_results'
    
    id = Column(Integer, primary_key=True, index=True)
    strategy_name = Column(String(100), nullable=False)
    symbol = Column(String(20), nullable=False, index=True)
    start_date = Column(DateTime, nullable=False)
    end_date = Column(DateTime, nullable=False)
    
    # Strategy configuration
    strategy_config = Column(JSONB, nullable=False)
    initial_capital = Column(Float, nullable=False)
    
    # Performance metrics
    total_return = Column(Float, nullable=False)
    total_return_pct = Column(Float, nullable=False)
    sharpe_ratio = Column(Float)
    max_drawdown = Column(Float)
    max_drawdown_pct = Column(Float)
    
    # Trade statistics
    total_trades = Column(Integer, nullable=False)
    winning_trades = Column(Integer, nullable=False)
    losing_trades = Column(Integer, nullable=False)
    win_rate = Column(Float, nullable=False)
    avg_profit = Column(Float)
    avg_loss = Column(Float)
    profit_factor = Column(Float)
    
    # Risk metrics
    volatility = Column(Float)
    beta = Column(Float)
    alpha = Column(Float)
    
    # Benchmark comparison
    benchmark_return = Column(Float)
    excess_return = Column(Float)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    
    __table_args__ = (
        Index('ix_backtest_results_strategy_symbol', 'strategy_name', 'symbol'),
        Index('ix_backtest_results_sharpe_ratio', 'sharpe_ratio'),
    )

class Trade(Base):
    """Individual trades executed during backtesting or live trading"""
    __tablename__ = 'trades'
    
    id = Column(Integer, primary_key=True, index=True)
    backtest_id = Column(Integer, ForeignKey('backtest_results.id'), index=True)
    symbol = Column(String(20), nullable=False, index=True)
    
    # Trade details
    action = Column(String(10), nullable=False)  # BUY, SELL
    quantity = Column(Integer, nullable=False)
    price = Column(Float, nullable=False)
    timestamp = Column(DateTime, nullable=False)
    
    # Trade reason
    signal_source = Column(String(50))  # What triggered this trade
    signal_strength = Column(Float)
    
    # Trade outcome (filled when trade is closed)
    exit_price = Column(Float)
    exit_timestamp = Column(DateTime)
    profit_loss = Column(Float)
    profit_loss_pct = Column(Float)
    hold_period = Column(Integer)  # Days held
    
    # Risk management
    stop_loss_price = Column(Float)
    take_profit_price = Column(Float)
    
    # Relationship
    backtest = relationship("BacktestResult", back_populates="trades")
    
    __table_args__ = (
        Index('ix_trades_symbol_timestamp', 'symbol', 'timestamp'),
        Index('ix_trades_backtest_action', 'backtest_id', 'action'),
    )

# Add relationship to BacktestResult
BacktestResult.trades = relationship("Trade", back_populates="backtest")

class SupportResistanceLevel(Base):
    """Support and resistance levels identified by the system"""
    __tablename__ = 'support_resistance_levels'
    
    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    level_type = Column(String(20), nullable=False)  # support, resistance
    price_level = Column(Float, nullable=False)
    strength = Column(Integer, nullable=False)  # Number of touches
    
    first_touch = Column(DateTime, nullable=False)
    last_touch = Column(DateTime, nullable=False)
    
    # Touch points
    touch_points = Column(JSONB)  # Store touch coordinates
    
    # Status
    is_active = Column(Boolean, default=True)
    broken_at = Column(DateTime)  # When level was broken
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    __table_args__ = (
        Index('ix_sr_levels_symbol_type', 'symbol', 'level_type'),
        Index('ix_sr_levels_price_strength', 'price_level', 'strength'),
    )

class MarketData(Base):
    """General market data and metadata"""
    __tablename__ = 'market_data'
    
    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    
    # Company/Asset information
    company_name = Column(String(200))
    sector = Column(String(100))
    industry = Column(String(100))
    market_cap = Column(Float)
    
    # Market info
    market = Column(String(10))  # US, TW, etc.
    currency = Column(String(3))  # USD, TWD, etc.
    
    # Trading info
    is_active = Column(Boolean, default=True)
    last_update = Column(DateTime, default=datetime.utcnow)
    
    # Additional metadata
    metadata = Column(JSONB)
    
    __table_args__ = (
        Index('ix_market_data_symbol_market', 'symbol', 'market'),
    )